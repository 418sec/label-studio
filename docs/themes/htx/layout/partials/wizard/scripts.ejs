<script>
function debounce(func, wait, immediate) {
  let timeout

  return function () {
    const context = this, args = arguments
    const later = () => {
      timeout = null
      if (!immediate) func.apply(context, args)
    }
    const callNow = immediate && !timeout

    clearTimeout(timeout)
    timeout = setTimeout(later, wait)
    if (callNow) func.apply(context, args)
  }
}

function selectGroup(e) {
  const $current = this.parentNode.querySelector('.active')
  if ($current === this) return
  $current && $current.classList.remove('active')
  this.classList.add('active')
  document.querySelector('.select__recipe main h1').textContent = this.textContent
  const $recipes = document.querySelector('.select__recipe main ul')
  $recipes.innerHTML = ''

  const group = this.textContent
  const tpl = TPLS.recipe

  recipes.filter(r => r.group === group).forEach(recipe => {
    const el = tpl.use({ h3: recipe.title, img: img => img.src = recipe.image }, $recipes)
    el.recipe = recipe
    el.onclick = selectRecipe
  })
}

function selectRecipe(e) {
  const recipe = this.recipe
  const page = TPLS.page.use({ 'h1>span': recipe.title })
  page.querySelector('.back').onclick = backToRecipesList

  const R = new Recipe(recipe, page)
  window.R = R

  document.querySelector('.wizard').dataset.mode = 'recipe'
}

function initRecipesList() {
  const $groups = document.querySelector('.recipes__sidebar ul')

  const groups = new Set()
  recipes.forEach(recipe => groups.add(recipe.group))
  groups.forEach(group => {
    const $group = document.createElement('li')
    $group.textContent = group
    $group.onclick = selectGroup
    $groups.appendChild($group)
  })
  selectGroup.call($groups.children[0])
}

function backToRecipesList(ev) {
  ev.preventDefault()
  const wizard = document.querySelector('.wizard')
  const page = wizard.querySelector('[data-page=recipe]')
  wizard.dataset.mode = 'list'
  wizard.removeChild(page)
}
</script>