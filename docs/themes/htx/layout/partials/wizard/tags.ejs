<script>
const OBJECTS = {
  Image: {
    type: 'Image',
    tags: ['img', 'image'],
    settings: {
      strokeWidth: {
        title: 'Width of region borders',
        type: Number,
        param: ($obj, value) => $obj.$controls.forEach($control => $control.setAttribute('strokeWidth', value))
      },
      zoom: {
        title: 'Allow to zoom image (ctrl+wheel)',
        type: Boolean,
        param: 'zoom',
      },
      zoomControl: {
        title: 'Show controls to zoom in and out',
        type: Boolean,
        param: 'zoomControl',
      },
      rotateControl: {
        title: 'Show controls to rotate image',
        type: Boolean,
        param: 'rotateControl',
      },
    },
  },
  Text: {
    type: 'Text',
    tags: ['text'],
    settings: {
      granularity: {
        title: 'Select text by words',
        type: Boolean,
        param: ($obj, value) => value ? $obj.setAttribute('granularity', 'word') : $obj.removeAttribute('granularity'),
      },
    },
  },
}
const CONTROLS = {
  Labels: {
    tags: ['labels', 'rectanglelabels'],
    settings: {
      filter: {
        title: 'Add filter for long list of labels',
        type: Boolean,
        control: true,
        param: ($obj, value) => {
          if (value) {
            const $filter = document.createElement('Filter')
            $filter.setAttribute('toName', $obj.getAttribute('name'))
            $filter.setAttribute('minlength', 0)
            $filter.setAttribute('name', 'filter') // @todo should be unique
            $obj.parentNode.insertBefore($filter, $obj)
          } else {
            const $filter = $obj.previousElementSibling
            if ($filter.tagName === "FILTER") $obj.parentNode.removeChild($filter)
          }
        },
      }
    }
  },
}
const OBJECT_TAGS = {}
Object.values(OBJECTS).forEach(obj => obj.tags.forEach(tag => OBJECT_TAGS[tag] = obj))
const CONTROL_TAGS = {}
Object.values(CONTROLS).forEach(obj => obj.tags.forEach(tag => CONTROL_TAGS[tag] = obj))
</script>